import * as Notifications from 'expo-notifications';
import * as Device from 'expo-device';
import { Platform, Alert } from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { API_CONFIG } from '../constants/config';

const EXPO_PUSH_TOKEN_KEY = '@expo_push_token';

// Configurer le handler de notifications
Notifications.setNotificationHandler({
  handleNotification: async () => ({
    shouldShowAlert: true,
    shouldPlaySound: true,
    shouldSetBadge: false,
    shouldShowBanner: true,
    shouldShowList: true,
  }),
});

/**
 * Demander permission et r√©cup√©rer token Expo Push
 * @returns Token Expo ou undefined si √©chec
 */
export async function registerForPushNotificationsAsync(): Promise<string | undefined> {
  console.log('\nüîî === D√âBUT ENREGISTREMENT NOTIFICATIONS ===');

  try {
    let token;

    // V√©rifier si c'est un device r√©el
    if (!Device.isDevice) {
      console.warn('‚ö†Ô∏è Pas un device r√©el (simulateur/√©mulateur)');
      Alert.alert(
        'Notifications d√©sactiv√©es',
        'Les notifications push ne fonctionnent que sur un appareil physique r√©el.',
        [{ text: 'OK' }]
      );
      return undefined;
    }
    console.log('‚úÖ Device r√©el d√©tect√©');

    // V√©rifier permissions actuelles
    const { status: existingStatus } = await Notifications.getPermissionsAsync();
    console.log(`üìã Permissions actuelles: ${existingStatus}`);

    let finalStatus = existingStatus;

    if (existingStatus !== 'granted') {
      console.log('‚ùì Demande de permissions...');
      const { status } = await Notifications.requestPermissionsAsync();
      finalStatus = status;
      console.log(`üìã Nouvelles permissions: ${finalStatus}`);
    }

    if (finalStatus !== 'granted') {
      console.error('‚ùå Permissions refus√©es par l\'utilisateur');
      Alert.alert(
        'Permissions refus√©es',
        'Vous devez autoriser les notifications dans les param√®tres de l\'application.',
        [{ text: 'OK' }]
      );
      return undefined;
    }
    console.log('‚úÖ Permissions notifications OK');

    // Configurer canal Android AVANT de r√©cup√©rer le token
    if (Platform.OS === 'android') {
      console.log('ü§ñ Configuration canal Android...');
      await Notifications.setNotificationChannelAsync('default', {
        name: 'default',
        importance: Notifications.AndroidImportance.MAX,
        vibrationPattern: [0, 250, 250, 250],
        lightColor: '#3B82F6',
      });
      console.log('‚úÖ Canal Android configur√©');
    }

    // R√©cup√©rer token Expo
    console.log('üé´ R√©cup√©ration token Expo...');
    try {
      token = (await Notifications.getExpoPushTokenAsync()).data;
      console.log('‚úÖ Token Expo r√©cup√©r√©:', token);

      // Sauvegarder localement
      await AsyncStorage.setItem(EXPO_PUSH_TOKEN_KEY, token);
      console.log('üíæ Token sauvegard√© dans AsyncStorage');
    } catch (tokenError: any) {
      console.error('‚ùå Erreur r√©cup√©ration token:', tokenError);
      Alert.alert('Erreur', `Impossible de r√©cup√©rer le token push:\n${tokenError.message}`);
      return undefined;
    }

    // Envoyer token au backend
    console.log('\nüì° Envoi token au backend...');
    console.log(`   URL: ${API_CONFIG.PUSH_API_URL}${API_CONFIG.ENDPOINTS.REGISTER_TOKEN}`);
    console.log(`   Token: ${token.substring(0, 40)}...`);

    try {
      const response = await fetch(
        `${API_CONFIG.PUSH_API_URL}${API_CONFIG.ENDPOINTS.REGISTER_TOKEN}`,
        {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ token })
        }
      );

      console.log(`   Status HTTP: ${response.status}`);

      if (response.ok) {
        const data = await response.json();
        console.log('‚úÖ Token enregistr√© sur le serveur:', data);
        Alert.alert(
          '‚úÖ Notifications activ√©es !',
          `Votre token a √©t√© enregistr√© avec succ√®s.\n\nToken: ${token.substring(0, 30)}...`,
          [{ text: 'OK' }]
        );
        return token;
      } else {
        const errorText = await response.text();
        console.warn('‚ö†Ô∏è Erreur serveur lors de l\'enregistrement:', response.status, errorText);
        Alert.alert(
          'Avertissement',
          `Le serveur a retourn√© une erreur (${response.status}), mais le token local est valide.\n\nVous recevrez peut-√™tre des notifications quand m√™me.`,
          [{ text: 'OK' }]
        );
        return token;
      }
    } catch (networkError: any) {
      console.warn('‚ö†Ô∏è Erreur r√©seau:', networkError.message);
      Alert.alert(
        'Serveur injoignable',
        `Impossible de contacter le serveur push.\n\nToken local enregistr√© : ${token.substring(0, 30)}...\n\nErreur: ${networkError.message}`,
        [{ text: 'OK' }]
      );
      // Token r√©cup√©r√© localement, l'app peut continuer
      return token;
    }

  } catch (error: any) {
    console.error('‚ùå Erreur critique:', error);
    Alert.alert('Erreur critique', `Une erreur inattendue s'est produite:\n${error.message}`);
    return undefined;
  } finally {
    console.log('üîî === FIN ENREGISTREMENT NOTIFICATIONS ===\n');
  }
}

/**
 * D√©senregistrer token (au logout par exemple)
 * @param token Token Expo √† d√©senregistrer
 */
export async function unregisterPushToken(token: string): Promise<void> {
  try {
    await fetch(
      `${API_CONFIG.PUSH_API_URL}${API_CONFIG.ENDPOINTS.UNREGISTER_TOKEN}`,
      {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ token })
      }
    );
    console.log('‚úÖ Token d√©sinscrit');
  } catch (error) {
    console.error('‚ùå Erreur d√©sinscription:', error);
  }
}
